name: Data CD - Parse and Upload to Firestore

on:
  pull_request:
    paths:
      - 'data/sources/**'
      - 'data/pipelines/**'
      - 'data/catalogs/scripts/**'
      - '.github/workflows/data-cd.yml'
  push:
    branches: [ main ]
    paths:
      - 'data/sources/**'
      - 'data/pipelines/**'
      - 'data/catalogs/scripts/**'
  workflow_dispatch:
    inputs:
      upload_to_firestore:
        description: 'Upload parsed data to Firestore (only on main branch)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write

jobs:
  parse-data:
    name: Parse Data Sources
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install poppler-utils (for PDF parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils

      - name: Install DVC
        run: |
          pip install dvc[gdrive]

      - name: Configure DVC
        run: |
          dvc remote modify origin gdrive_use_service_account true
          dvc remote modify origin --local gdrive_service_account_json '${{ secrets.DVC_SERVICE_ACCOUNT }}'

      - name: Pull source data from DVC
        run: |
          dvc pull data/sources/catalogs/

      - name: Install dependencies
        working-directory: data
        run: npm ci

      - name: Parse Catalogs
        id: parse-catalogs
        working-directory: data
        run: |
          echo "🔄 Parsing catalog PDFs..."
          npm run parse:catalog || echo "PARSE_FAILED=true" >> $GITHUB_OUTPUT
          
          # Generate parsing report
          echo "📊 Generating health report..."
          npm run health:catalog || true
          
          # Check if any new files were parsed
          if git diff --name-only | grep -q "data/sources/catalogs/"; then
            echo "NEW_DATA=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate Parsed Data
        if: steps.parse-catalogs.outputs.PARSE_FAILED != 'true'
        working-directory: data
        run: |
          echo "✅ Validating parsed data..."
          npm run validate:catalog

      - name: Generate Parse Report
        if: github.event_name == 'pull_request'
        working-directory: data
        run: |
          # Create a summary of what was parsed
          echo "## 📊 Parsing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count new/modified files
          NEW_COUNT=$(git diff --name-only | grep "data/sources/catalogs/" | wc -l || echo "0")
          echo "- **New/Modified Files**: $NEW_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Show latest parsing report if exists
          if [ -f "analytics/reports/catalog-*.json" ]; then
            LATEST_REPORT=$(ls -t analytics/reports/catalog-*.json | head -1)
            echo "- **Latest Report**: \`$LATEST_REPORT\`" >> $GITHUB_STEP_SUMMARY
            
            # Extract key metrics from report
            if command -v jq >/dev/null 2>&1; then
              TOTAL_COURSES=$(jq -r '.summary.totalCourses // 0' "$LATEST_REPORT")
              PARSE_ERRORS=$(jq -r '.summary.parseErrors // 0' "$LATEST_REPORT")
              echo "- **Total Courses**: $TOTAL_COURSES" >> $GITHUB_STEP_SUMMARY
              echo "- **Parse Errors**: $PARSE_ERRORS" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Comment on PR with Results
        if: github.event_name == 'pull_request' && steps.parse-catalogs.outputs.NEW_DATA == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the step summary
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            // Create PR comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Data Parsing Results\n\n${summary}\n\n✅ All validations passed. These changes will be uploaded to Firestore when merged.`
            });

      - name: Upload parsed data artifacts
        if: steps.parse-catalogs.outputs.NEW_DATA == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: parsed-data
          path: |
            data/sources/catalogs/
            data/analytics/reports/
          retention-days: 7

  upload-to-firestore:
    name: Upload to Firestore
    needs: parse-data
    runs-on: ubuntu-latest
    # Only run on main branch or manual trigger
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_to_firestore == 'true')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        working-directory: data
        run: npm ci

      - name: Download parsed data
        uses: actions/download-artifact@v4
        with:
          name: parsed-data
          path: data/

      - name: Set up Firebase credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > serviceAccount.json

      - name: Upload Catalog Data to Firestore
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/serviceAccount.json
        working-directory: data
        run: |
          echo "📤 Uploading catalog data to Firestore..."
          npm run upload:academic-registry
          
          echo "✅ Data successfully uploaded to Firestore!"

      - name: Verify Upload
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/serviceAccount.json
        working-directory: data
        run: |
          echo "🔍 Verifying Firestore data..."
          npm run verify:firestore || echo "Verification script not found, skipping..."

      - name: Clean up credentials
        if: always()
        run: rm -f serviceAccount.json

      - name: Create success notification
        run: |
          echo "## ✅ Firestore Upload Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY