# Use nix flake for development environment
use flake

# Load .env file if it exists (for secrets, API keys, etc.)
dotenv_if_exists .env

# Watch specific files for changes and reload environment
watch_file flake.nix
watch_file package.json
watch_file package-lock.json

# Set project-specific environment variables
export PROJECT_ROOT=$(pwd)
export NODE_ENV=development

# Enable experimental features if needed
export NIX_CONFIG="experimental-features = nix-command flakes"

# Node.js environment setup (following NixOS wiki recommendations)
# Set npm prefix to project-local directory to avoid global installs
export NPM_CONFIG_PREFIX="$PWD/.npm-global"
mkdir -p "$NPM_CONFIG_PREFIX"

# Add node_modules/.bin and npm-global/bin to PATH for npx and local installs
PATH_add "$PWD/node_modules/.bin"
PATH_add "$NPM_CONFIG_PREFIX/bin"

# Set up npm cache in project directory
export NPM_CONFIG_CACHE="$PWD/.npm-cache"
mkdir -p "$NPM_CONFIG_CACHE"

# Optional: Set up pnpm if you use it
export PNPM_HOME="$PWD/.pnpm"
mkdir -p "$PNPM_HOME"
PATH_add "$PNPM_HOME"

# Git configuration optimizations for large file repository
# This repo contains 100+ large catalog JSON files, so we optimize Git for better performance
git config --local http.postBuffer 524288000    # 500MB buffer for large pushes
git config --local core.compression 0           # Disable compression to reduce CPU overhead
git config --local pack.windowMemory "100m"     # Use more memory for packing
git config --local pack.packSizeLimit "2g"      # Allow larger pack files

